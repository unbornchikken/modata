{"version":3,"names":[],"mappings":"","sources":["index.js"],"sourcesContent":["\"use strict\";\r\n/*global it,describe,before*/\r\nlet fs = require(\"fs\");\r\nlet mongoose = require(\"mongoose\");\r\nlet Schema = mongoose.Schema;\r\nlet assert = require(\"chai\").assert;\r\nlet Query = require(\"../../\").Query;\r\n\r\nlet ObjectId = Schema.ObjectId;\r\n\r\nlet OrigSchema = new mongoose.Schema({\r\n    value: { type: String, default: \"original\" }\r\n});\r\nlet TestSchema = new mongoose.Schema({\r\n    title: { type: String, index: true },\r\n    msg: { type: String, lowercase: true, trim: true },\r\n    date: { type: Date, default: Date.now },\r\n    orig: { type: ObjectId, ref: \"originals\" },\r\n    nest: {\r\n        ed: { type: String, default: \"value\" }\r\n    }\r\n});\r\nTestSchema.plugin(Query);\r\nlet origModel = mongoose.model(\"originals\", OrigSchema);\r\nlet Test = mongoose.model(\"test\", TestSchema);\r\n\r\n\r\nmongoose.connect(process.env.MONGO_URL, {});\r\nlet _id = \"123123\";\r\n\r\ndescribe('Query:basic', function () {\r\n    before(function (done) {\r\n        this.timeout(10000);\r\n\r\n        var create = function (i, max, callback) {\r\n            if (i < max) {\r\n                var obj = new Test({ title: (i < 10 ? 'testa' : 'testb'), msg: 'i#' + i, orig: _id });\r\n                obj.save(function (error, doc) {\r\n                    create(i + 1, max, callback);\r\n                });\r\n            } else {\r\n                callback();\r\n            }\r\n        }\r\n        mongoose.connection.on('connected', function () {\r\n            origModel.remove({}, function () {\r\n                var obj = new origModel();\r\n                obj.save(function (error, doc) {\r\n                    _id = doc._id;\r\n\r\n                    Test.remove({}, function () {\r\n                        create(0, 20, done);\r\n                    });\r\n                });\r\n            });\r\n        });\r\n    });\r\n\r\n    it('all', function (done) {\r\n        Test.Query({ q: '{}' }).exec(function (error, data) {\r\n            assert.equal(error, undefined);\r\n            assert.equal(data.length, 20);\r\n            assert.isTrue((data[0].orig + '').match(/([0-9a-z]{24})/) != null);\r\n            done();\r\n        });\r\n    });\r\n    it('regex', function (done) {\r\n        Test.Query({ q: '{\"title\": {\"$regex\": \"/^testa/\"}}' }).exec(function (error, data) {\r\n            assert.equal(error, undefined);\r\n            assert.equal(data.length, 10);\r\n            assert.isTrue((data[0].orig + '').match(/([0-9a-z]{24})/) != null);\r\n            done();\r\n        });\r\n    });\r\n    it('regex && ic', function (done) {\r\n        Test.Query({ q: '{\"title\": {\"$regex\": \"/^testa/\"}}', ic: true, sk: 2 }).exec(function (error, data) {\r\n            assert.equal(error, undefined);\r\n            assert.equal(data.count, 10);\r\n            assert.equal(data.data.length, 8);\r\n            assert.isTrue((data.data[0].orig + '').match(/([0-9a-z]{24})/) != null);\r\n            done();\r\n        });\r\n    });\r\n    it('find & sort', function (done) {\r\n        Test.Query({ q: '{}', t: 'find', s: '{\"msg\": 1}', l: 1 }).exec(function (error, data) {\r\n            assert.equal(error, undefined);\r\n            assert.typeOf(data, 'Array');\r\n            assert.equal(data[0].title, 'testa');\r\n            assert.equal(data[0].msg, 'i#0');\r\n            assert.equal(data.length, 1);\r\n            done();\r\n        });\r\n    });\r\n    it('exact', function (done) {\r\n        Test.Query({ q: '{\"msg\":\"i#3\"}' }).exec(function (error, data) {\r\n            assert.equal(error, undefined);\r\n            assert.equal(data.length, 1);\r\n            assert.equal(data[0].msg, \"i#3\");\r\n            done();\r\n        });\r\n    });\r\n    it('populate', function (done) {\r\n        Test.Query({ q: '{\"msg\":\"i#3\"}', p: 'orig' }).exec(function (error, data) {\r\n            assert.equal(error, undefined);\r\n            assert.equal(data.length, 1);\r\n            assert.equal(data[0].msg, \"i#3\");\r\n            assert.equal(data[0].orig.value, \"original\");\r\n            done();\r\n        });\r\n    });\r\n    it('limit & select', function (done) {\r\n        Test.Query({ q: '{}', f: 'title', l: '3', s: '{\"title\": -1}' }).exec(function (error, data) {\r\n            assert.equal(error, undefined);\r\n            assert.equal(data.length, 3);\r\n            assert.equal(data[0].msg, undefined);\r\n            assert.equal(data[0].title, \"testb\");\r\n            assert.equal(data[1].msg, undefined);\r\n            assert.equal(data[1].title, \"testb\");\r\n            assert.equal(data[2].msg, undefined);\r\n            assert.equal(data[2].title, \"testb\");\r\n            done();\r\n        });\r\n    });\r\n\r\n    it('skip', function (done) {\r\n        Test.Query({ q: '{}', sk: '3' }).exec(function (error, data) {\r\n            assert.equal(error, undefined);\r\n            assert.equal(data.length, 17);\r\n            done();\r\n        });\r\n    });\r\n\r\n    it('count', function (done) {\r\n        Test.Query({ q: '{\"$or\": [ {\"msg\":\"i#1\"}, {\"msg\":\"i#2\"}]}', t: 'count' }).exec(function (error, data) {\r\n            assert.equal(error, undefined);\r\n            assert.equal(data, 2);\r\n            done();\r\n        });\r\n    });\r\n\r\n    it('distinct', function (done) {\r\n        Test.Query({ f: 'title', t: 'distinct' }).exec(function (error, data) {\r\n            assert.equal(error, undefined);\r\n            assert.equal(data.length, 2);\r\n\r\n            done();\r\n        });\r\n    });\r\n});"],"file":"index.js","sourceRoot":"/source/"}