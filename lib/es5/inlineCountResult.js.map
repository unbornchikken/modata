{"version":3,"names":[],"mappings":"","sources":["inlineCountResult.js"],"sourcesContent":["\"use strict\";\n\nlet _ = require(\"lodash\");\nlet Bluebird = require(\"bluebird\");\nlet async = Bluebird.coroutine;\n\nfunction InlineCountResult(originalQuery, query, isAggregate) {\n    this.originalQuery = originalQuery;\n    this.query = query;\n    this.isAggregate = isAggregate;\n}\n\nInlineCountResult.prototype._verifyQuery = function () {\n    if (this.isAggregate) {\n        throw new Error(\"Operation not supported on an Aggregate.\");\n    }\n};\n\nInlineCountResult.prototype._verifyAggregate = function () {\n    if (!this.isAggregate) {\n        throw new Error(\"Operation not supported on a Query.\");\n    }\n};\n\nInlineCountResult.prototype.lean = function () {\n    this._verifyQuery();\n    return new InlineCountResult(this.originalQuery, this.query.lean.apply(this.query, arguments));\n};\n\nInlineCountResult.prototype.select = function () {\n    this._verifyQuery();\n    return new InlineCountResult(this.originalQuery, this.query.select.apply(this.query, arguments));\n};\n\nInlineCountResult.prototype.where = function () {\n    this._verifyQuery();\n    return new InlineCountResult(this.originalQuery.where.apply(this.originalQuery, arguments), this.query.where.apply(this.query, arguments));\n};\n\nInlineCountResult.prototype.equals = function () {\n    this._verifyQuery();\n    return new InlineCountResult(this.originalQuery.equals.apply(this.originalQuery, arguments), this.query.equals.apply(this.query, arguments));\n};\n\nInlineCountResult.prototype.in = function () {\n    this._verifyQuery();\n    return new InlineCountResult(this.originalQuery.in.apply(this.originalQuery, arguments), this.query.in.apply(this.query, arguments));\n};\n\nInlineCountResult.prototype.and = function () {\n    this._verifyQuery();\n    return new InlineCountResult(this.originalQuery.and.apply(this.originalQuery, arguments), this.query.and.apply(this.query, arguments));\n};\n\nInlineCountResult.prototype.or = function () {\n    this._verifyQuery();\n    return new InlineCountResult(this.originalQuery.or.apply(this.originalQuery, arguments), this.query.or.apply(this.query, arguments));\n};\n\nInlineCountResult.prototype.exec = function (callback) {\n    let self = this;\n    let p = async(function*() {\n        let queryResult;\n        let count;\n        if (self.isAggregate) {\n            queryResult = yield self.query.exec();\n            let cr = yield self.originalQuery.group({ _id: null, count: { $sum: 1 } }).exec();\n            if (_.isArray(cr)) {\n                cr = cr[0];\n            }\n            count = cr ? cr.count : 0;\n        }\n        else {\n            queryResult = yield self.query.exec();\n            count = yield self.originalQuery.count().exec();\n        }\n        return {\n            data: queryResult,\n            count: count\n        };\n    })();\n    if (callback) {\n        p.nodeify(callback);\n    }\n    return p;\n};\n\nmodule.exports = InlineCountResult;"],"file":"inlineCountResult.js","sourceRoot":"/source/"}