{"version":3,"names":[],"mappings":"","sources":["inlineCountResult.js"],"sourcesContent":["\"use strict\";\r\n\r\nlet _ = require(\"lodash\");\r\nlet Bluebird = require(\"bluebird\");\r\nlet async = Bluebird.coroutine;\r\n\r\nfunction InlineCountResult(originalQuery, query, isAggregate) {\r\n    this.originalQuery = originalQuery;\r\n    this.query = query;\r\n    this.isAggregate = isAggregate;\r\n}\r\n\r\nInlineCountResult.prototype._verifyQuery = function () {\r\n    if (this.isAggregate) {\r\n        throw new Error(\"Operation not supported on an Aggregate.\");\r\n    }\r\n};\r\n\r\nInlineCountResult.prototype._verifyAggregate = function () {\r\n    if (!this.isAggregate) {\r\n        throw new Error(\"Operation not supported on a Query.\");\r\n    }\r\n};\r\n\r\nInlineCountResult.prototype.lean = function () {\r\n    this._verifyQuery();\r\n    return new InlineCountResult(this.originalQuery, this.query.lean.apply(this.query, arguments));\r\n};\r\n\r\nInlineCountResult.prototype.select = function () {\r\n    this._verifyQuery();\r\n    return new InlineCountResult(this.originalQuery, this.query.select.apply(this.query, arguments));\r\n};\r\n\r\nInlineCountResult.prototype.where = function () {\r\n    this._verifyQuery();\r\n    return new InlineCountResult(this.originalQuery.where.apply(this.originalQuery, arguments), this.query.where.apply(this.query, arguments));\r\n};\r\n\r\nInlineCountResult.prototype.equals = function () {\r\n    this._verifyQuery();\r\n    return new InlineCountResult(this.originalQuery.equals.apply(this.originalQuery, arguments), this.query.equals.apply(this.query, arguments));\r\n};\r\n\r\nInlineCountResult.prototype.in = function () {\r\n    this._verifyQuery();\r\n    return new InlineCountResult(this.originalQuery.in.apply(this.originalQuery, arguments), this.query.in.apply(this.query, arguments));\r\n};\r\n\r\nInlineCountResult.prototype.and = function () {\r\n    this._verifyQuery();\r\n    return new InlineCountResult(this.originalQuery.and.apply(this.originalQuery, arguments), this.query.and.apply(this.query, arguments));\r\n};\r\n\r\nInlineCountResult.prototype.or = function () {\r\n    this._verifyQuery();\r\n    return new InlineCountResult(this.originalQuery.or.apply(this.originalQuery, arguments), this.query.or.apply(this.query, arguments));\r\n};\r\n\r\nInlineCountResult.prototype.exec = function (callback) {\r\n    let self = this;\r\n    let p = async(function*() {\r\n        let queryResult;\r\n        let count;\r\n        if (self.isAggregate) {\r\n            queryResult = yield self.query.exec();\r\n            let cr = yield self.originalQuery.group({ _id: null, count: { $sum: 1 } }).exec();\r\n            if (_.isArray(cr)) {\r\n                cr = cr[0];\r\n            }\r\n            count = cr.count;\r\n        }\r\n        else {\r\n            queryResult = yield self.query.exec();\r\n            count = yield self.originalQuery.count().exec();\r\n        }\r\n        return {\r\n            data: queryResult,\r\n            count: count\r\n        };\r\n    })();\r\n    if (callback) {\r\n        p.nodeify(callback);\r\n    }\r\n    return p;\r\n};\r\n\r\nmodule.exports = InlineCountResult;"],"file":"inlineCountResult.js","sourceRoot":"/source/"}